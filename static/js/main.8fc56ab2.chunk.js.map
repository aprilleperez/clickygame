{"version":3,"sources":["components/Navbar.js","components/Jumbo.js","components/Card.js","components/CardContainer.js","App.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","score","highscore","Jumbo","Card","_props$data","data","id","name","image","src","alt","onClick","handleClick","CardContainer","state","scouts","clicked","reset","console","log","_this","setState","shuffleScouts","arr","j","temp","i","length","Math","floor","random","indexOf","addScore","concat","this","_this2","components_Navbar","components_Jumbo","map","scout","components_Card","key","Component","App","components_CardContainer","ReactDOM","render","src_App","document","getElementById"],"mappings":"sqDAceA,QATA,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8CACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAhB,4BACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAhB,UAA6CJ,EAAMK,MAAnD,oBAA2EL,EAAMM,cCU1EC,MAbf,WACI,OACQN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,kFACAF,EAAAC,EAAAC,cAAA,yDACAF,EAAAC,EAAAC,cAAA,4JCKDK,EAZF,SAAAR,GAAS,IAAAS,EACUT,EAAMU,KAA1BC,EADUF,EACVE,GAAIC,EADMH,EACNG,KAAMC,EADAJ,EACAI,MAClB,OACIZ,EAAAC,EAAAC,cAAA,OAAKQ,GAAIA,GAELV,EAAAC,EAAAC,cAAA,OAAKQ,GAAIA,EAAIP,UAAU,OAAOU,IAAKD,EAAOE,IAAKH,EAAMI,QAAS,kBAAMhB,EAAMiB,YAAYN,eCoGnFO,6MAjGXC,MAAQ,CACJC,SACAf,MAAO,EACPC,UAAW,EACXe,QAAS,MAIbC,MAAQ,WACJC,QAAQC,IAAI,SACZC,EAAKC,SAAS,CACVrB,MAAO,EACPgB,QAAS,KAEbI,EAAKE,cAAcP,MASvBO,cAAgB,SAAAC,GACZ,IAAIC,EAAGC,EAAMC,EACb,IAAKA,EAAIH,EAAII,OAAS,EAAGD,EAAI,EAAGA,IAC5BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAOF,EAAIG,GACXH,EAAIG,GAAKH,EAAIC,GACbD,EAAIC,GAAKC,EAEb,OAAOF,KAIXX,YAAc,SAAAN,GACVY,QAAQC,IAAI,WAAkBb,IACU,IAApCc,EAAKN,MAAME,QAAQe,QAAQzB,IAC3Bc,EAAKY,WACLZ,EAAKC,SAAS,CACVL,QAASI,EAAKN,MAAME,QAAQiB,OAAO3B,MAGvCc,EAAKC,SAAS,CACVrB,MAAO,IAGfoB,EAAKE,cAAcF,EAAKN,MAAMC,WAGlCiB,SAAW,WACPd,QAAQC,IAAI,YAEZC,EAAKC,SAAS,CACVrB,MAAOoB,EAAKN,MAAMd,MAAQ,EAC1BC,UAAWmB,EAAKN,MAAMb,UAAY,IAStCmB,EAAKE,cAAcP,uFA7CnBmB,KAAKZ,cAAcP,oCAiDd,IAAAoB,EAAAD,KACL,OACItC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACsC,EAAD,CAAQpC,MAAOkC,KAAKpB,MAAMd,MAAOC,UAAWiC,KAAKpB,MAAMb,YACvDL,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAGPgB,EAAOuB,IAAI,SAACC,EAAOb,GAEf,OACI9B,EAAAC,EAAAC,cAAC0C,EAAD,CACIC,IAAKf,EACLrB,KAAMkC,EACN3B,YAAauB,EAAKvB,yBApF1B8B,aCSbC,MAZf,WACE,OACE/C,EAAAC,EAAAC,cAAA,WAGEF,EAAAC,EAAAC,cAAC8C,EAAD,QCPNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.8fc56ab2.chunk.js","sourcesContent":["import React from \"react\";\nimport '../styles/App.css';\n////////////////////////////////////////////////////////////\n\n\nconst Navbar = props => (\n    <div className=\"navbar sticky-top navbar-expand-lg cstmNav\">\n        <span className=\"navbar-brand title\">Sailor Scouts Click Game</span>\n        <span className=\"navbar-brand score\">Score: {props.score}  |  High Score: {props.highscore}</span>\n    </div>\n);\n\n\n////////////////////////////////////////////////////////////\nexport default Navbar;\n\n\n// function Navbar() {\n//     return (\n//         <div className=\"navbar sticky-top navbar-expand-lg\">\n//             <span className=\"navbar-brand title\">Click Game</span>\n//             <span className=\"navbar-brand score\">Score: 0  |  Top Score: 0</span>\n//             {/* <span className=\"nav-item\" href=\"#\">Instructions</span>\n//             <span className=\"nav-item\" href=\"#\">Score: 0  |  Top Score: 0</span> */}\n//         </div>\n//     );\n// }","import React from \"react\";\nimport \"../styles/App.css\";\n////////////////////////////////////////////////////////////\n\n\nfunction Jumbo() {\n    return (\n            <div className=\"jumbotron cstmJumbo\">\n                <h5>Instructions:</h5> \n                <p>This is a memory game based on 12 picture of the Sailor scouts below.</p>\n                <p>Click each picture ONLY ONCE to get a point!</p>\n                <p>But be careful, after each click the pictures shuffle their position on the screen, so you'll have to remember which one you already clicked.</p>\n                {/* <h1 className=\"text-center\">Score: 0  |  Top Score: 0</h1> */}\n            </div>\n    );\n}\n\n////////////////////////////////////////////////////////////\nexport default Jumbo;","import React from \"react\";\n////////////////////////////////////////////////////////////\n\n\nconst Card = props => {\n    const { id, name, image } = props.data\n    return (\n        <div id={id} >\n            {/* sets up id, image link, and name from json file, and sets up listener for onClick event */}\n            <img id={id} className=\"card\" src={image} alt={name} onClick={() => props.handleClick(id)}></img>\n        </div>\n    );\n}\n\n\n////////////////////////////////////////////////////////////\nexport default Card;\n","import React, { Component } from \"react\";\n// import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport Jumbo from \"./Jumbo\";\nimport Card from \"./Card\";\nimport \"../styles/App.css\";\nimport scouts from \"../sailorscouts.json\";\n////////////////////////////////////////////////////////////\n\n\nclass CardContainer extends Component {\n    // set base state of scouts, scores to 0, and clicked to empty array\n    state = {\n        scouts,\n        score: 0,\n        highscore: 0,\n        clicked: []\n    };\n\n    // to reset score and shuffle at end of round\n    reset = () => {\n        console.log(\"reset\")\n        this.setState({\n            score: 0,\n            clicked: []\n        });\n        this.shuffleScouts(scouts);\n    }\n\n    // randomize scouts on pg load\n    componentDidMount() {\n        this.shuffleScouts(scouts);\n    }\n\n    // shuffle scouts position\n    shuffleScouts = arr => {\n        var j, temp, i;\n        for (i = arr.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return arr;\n    }\n\n    // when scout is clicked, will track the id in the array and determine if score will be added\n    handleClick = id => {\n        console.log(\"clicked\" + \" \" + id)\n        if (this.state.clicked.indexOf(id) === -1) {\n            this.addScore();\n            this.setState({\n                clicked: this.state.clicked.concat(id)\n            });\n        } else {\n            this.setState({\n                score: 0\n            })\n        }\n        this.shuffleScouts(this.state.scouts)\n    }\n\n    addScore = () => {\n        console.log(\"addScore\");\n        // if all have been guessed correctly\n        this.setState({\n            score: this.state.score + 1,\n            highscore: this.state.highscore + 1\n        })\n\n        // if (this.state.score === 11) {\n        //     this.setState({\n        //         highscore: this.state.highscore + 1\n        //     })\n        //     this.reset();\n        // }\n        this.shuffleScouts(scouts);\n    }\n\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <Navbar score={this.state.score} highscore={this.state.highscore} />\n                <Jumbo />\n                <div className=\"cardContainer\">\n                    {/* iterates over each scout in sailorscouts.js file to generate card. Card will be given data from json file and set up the onClick listener */}\n                    {\n                        scouts.map((scout, i) => {\n                            // console.log(scout)\n                            return (\n                                <Card\n                                    key={i}\n                                    data={scout}\n                                    handleClick={this.handleClick}\n                                />\n                            )\n                        })\n                    }\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\n\n////////////////////////////////////////////////////////////\nexport default CardContainer;\n\n\n // when button clicked, shuffle the scouts\n    // buttonClicked = () => {\n    //     this.setState({ scouts: this.shuffleScouts(this.state.scouts) })\n    // }\n\n     // id={scout.id}\n                                    // src={scout.src}\n                                    // alt={scout.alt}\n                                    // buttonClicked={this.buttonClicked}","import React from \"react\";\n// import Navbar from \"./components/Navbar\";\n// import Jumbo from \"./components/Jumbo\";\nimport CardContainer from \"./components/CardContainer\";\n////////////////////////////////////////////////////////////\n\n\nfunction App() {\n  return (\n    <div>\n      {/* <Navbar />\n      <Jumbo /> */}\n      <CardContainer />\n    </div>\n  );\n}\n\n\n////////////////////////////////////////////////////////////\nexport default App;\n\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import Navbar from \"./components/Navbar\";\n// import Jumbo from \"./components/Jumbo\";\n// import Card from \"./components/Card\";\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div>\n//       <Navbar />\n//       <Jumbo />\n//       <Card />\n//       <h1>Hello this prints</h1>\n//     </div>\n//   );\n// }\n\n// // export the SPA for index.js to use\n// export default App;\n\n\n\n\n\n\n\n\n\n// import logo from './logo.svg';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           content here\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './styles/index.css';\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// // import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// // serviceWorker.unregister();\n"],"sourceRoot":""}